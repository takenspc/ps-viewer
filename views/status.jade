extends layout

mixin formatEntry(entry)
  - var status = entry.status
  - var classList = []
  - classList.push(engine)
  - classList.push(status.status)
  - status.behindFlag && classList.push('behindFlag')
  - status.prefixed && classList.push('prefixed')
  li.entry(class=classList)
    - var statusURL = entry.statusURL
    a(href=statusURL) 
      span.title= entry.title
    div.status
      span.text= status.originalStatus
      if status.channel
        |  (starting 
        span.channel= status.channel
        | )
      if status.behindFlag
        | 
        span.behindFlag (behind a flag)
      if status.prefixed
        | 
        span.channel (prefixed)


mixin formatEngine(engine, entries)
  div.engine
    h5.engine-name(class=engine)= engine
    ul.entry-list
      each entry in entries
        +formatEntry(entry)


mixin formatFragment(url, fragment)
  - var id = url + encodeURIComponent(fragment.fragment)
  - var href = '/status/' + url + encodeURIComponent(fragment.fragment)
  - var fragmentText = decodeURIComponent(fragment.fragment || '#')
  div.fragment(id=id)
    h4.fragment-name= fragmentText

    each engine in engines
      - var entries = fragment.engines[engine]
      if entries
        +formatEngine(engine, entries)


mixin formatURL(host, urlEntry)
  - var url = urlEntry.url
  - var id = url
  - var href = '/status/' + encodeURIComponent(url || 'about:blank')
  - var headingText = url || '(no url was specified)'
  - var linkText = 'View the spec (' + host + ')'
  section.url(id=id)
    h3.url-name= headingText
    ul.url-nav
      if url
        li.link.link-spec
          a(href=url)= linkText
      if !isStandalonePage
        li.link.link-standalone
          a(href=href) View on standalone page

    each fragment in urlEntry.fragments
      +formatFragment(url, fragment)


mixin formatHost(hostEntry)
  - var host = hostEntry.host
  - var id = host || 'about:blank'
  - var headingText = host || '(no host was specified)'
  section.host(id=id)
    h2.host-name= headingText
    each urlEntry in hostEntry.urls
      +formatURL(host, urlEntry)


mixin formatTOC(hostEntry)
  - var host = hostEntry.host
  - var href = '#' + encodeURIComponent(host || 'about:blank')
  - var headingText = (host || '(no url was specified)') + ' (' + hostEntry.urls.length + ')'
  li
    a(href=href)= headingText

block content
  - var h1String = 'Platform Status: ' + h1
  h1= h1String
  div.content
    div.toc
      h2 Table of Contents
      ul.toc-list
        each hostEntry in data
          +formatTOC(hostEntry)
    each hostEntry in data
      +formatHost(hostEntry)
